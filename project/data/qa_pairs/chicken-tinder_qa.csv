question,answer
"What is the primary purpose of the Chicken Tinder application?","Chicken Tinder is a web app designed to solve the common problem of friend groups being unable to decide on a place to eat. It facilitates a collaborative decision-making process by allowing users to form groups, nominate restaurants, and vote on them in a streamlined manner."
"How is the project structured, and what are the main packages within the monorepo?","The project is a monorepo managed with npm workspaces. The main packages are located in the 'packages/' directory and include: 'packages/frontend' (a React single-page application), 'packages/backend' (a Node.js and Express server), and 'packages/testing' (a Cypress end-to-end testing suite)."
"What is the technology stack used for the frontend and backend of Chicken Tinder?","The frontend is built with React, using React Router for navigation, React Context for state management, and Tailwind CSS for styling. The backend is built with Node.js and Express.js, and it uses a MongoDB database with Mongoose as the ODM."
"How does the application implement real-time functionality for group members?","Real-time functionality is implemented using WebSockets via the socket.io library. When a user joins a group (a 'flock'), their client joins a room specific to that flock's code. When the group's state changes, the server emits a 'flock-updated' event to all clients in that room, pushing the new state and updating their UIs without needing a page refresh."
"Describe the user authentication mechanism used in the application.","Authentication is handled using JSON Web Tokens (JWT). When a user logs in, the backend validates their credentials using bcrypt.compareSync and, if successful, generates a JWT containing their user ID and an expiration time. This token is sent to the client and stored in a cookie. A middleware function then verifies this token on protected routes."
"How are the unique, human-readable 'coop names' generated?","The application generates memorable group codes by combining a random adjective and a random food name from predefined text files ('adjectives.txt' and 'foods.txt'). This utility creates a hyphenated string like 'happy-taco' and ensures its uniqueness by checking the database and appending a number if a collision occurs."
"What is the algorithm for determining the winning restaurant?","The winning restaurant is determined by the getWinningRestaurant function. The primary criterion is the total number of 'yesVotes'. If there is a tie, a secondary criterion is used: the ratio of 'yesVotes' to 'noVotes'. The restaurant with the higher ratio wins, which prioritizes options with fewer negative votes."
"How does the application manage the flow of the user journey from creating a group to seeing the winner?","The application flow is controlled by a 'step' property in the backend's 'flockSchema'. This integer tracks the group's current stage: 1 for the lobby, 2 for nominations, 3 for voting, and 4 for the winner. The frontend's 'MainFlockPage.js' component reads this value and conditionally renders the appropriate page component."
"What is the role of the CoopProvider in the frontend's state management?","The 'CoopProvider', defined in 'coop-context.js', manages the client-side WebSocket connection. It exposes a function to connect to a flock's room and listens for 'message' events from the server. When it receives a 'flock-updated' message, it updates its context, making the latest group state available to all consuming components in real-time."
"Describe the user experience during the voting phase on the 'VotingPage'.","The 'VotingPage' provides a fast-paced, 'Tinder-style' voting experience. It displays a random restaurant nomination and a relevant GIF from the Tenor API. Users have a 5-second timer to vote 'Yes' or 'No'. If the timer expires, a neutral vote is automatically submitted, encouraging quick decisions."
"How is the project configured for Continuous Integration and Deployment (CI/CD)?","The project uses GitHub Actions for CI/CD. The 'ci-testing.yml' workflow runs linting and Cypress tests on pushes and pull requests. The 'ci-cd_chickentinder-backend.yml' workflow automatically deploys the backend to Azure Web Apps on pushes to main. Similarly, the 'frontend-deploy.yml' workflow deploys the frontend to Netlify on pushes to main."
"What is the purpose of the 'start-server-and-test' package in this project?","The 'start-server-and-test' package is used in the root 'package.json' test script to orchestrate the end-to-end testing process. It starts the backend server, waits for it to be ready, then starts the frontend server, and finally, once both are running, it executes the Cypress tests. This ensures the full application environment is up before tests are run."
"The application has a playful chicken theme. Can you provide examples of how this theme is used in the app's terminology?","Yes, the chicken theme is used in the application's terminology where users are called 'Hens', groups are 'Flocks' or 'Coops', group members are 'Chicks', restaurant nominations are 'Eggs', and the list of options is the 'Basket'."
"Where are the database schemas defined and what are the key models?","The database schemas are defined in 'packages/backend/flock.js' using Mongoose. The key models include 'Hen' for registered users, and 'Flock' for a group session. The 'Flock' schema contains the 'coopName', an 'owner', an array of 'chicks' (using 'chickSchema'), and a 'basket' of 'eggs' (using 'eggSchema')."
"What is the purpose of the Cypress E2E test found in 'single-user.cy.js'?","The 'single-user.cy.js' test file contains an end-to-end test that simulates a 'happy path' workflow for a single user acting as the group leader. It automates logging in, creating a new flock, entering a name, nominating restaurants, voting 'yes' on them, and verifying that the winner page is displayed correctly. This ensures the core application functionality works as expected."
"How does the frontend handle state for user authentication across browser sessions?","The frontend's 'AuthProvider' manages authentication state. To persist login status across browser sessions, it uses the 'js-cookie' library to store the JWT received from the backend in a browser cookie. On application load, the context checks for this cookie and verifies the token with the backend to re-establish the user's logged-in state."
"How does the 'VotingPage' handle a user not voting within the time limit?","The 'VotingPage' uses the 'react-timer-hook' for a 5-second countdown. If the user does not vote in time, the 'onExpire' callback is triggered, which submits a neutral vote (value of 0) to keep the process moving."
"What is the purpose of the 'ProtectedPage.js' component on the frontend?","'ProtectedPage.js' is a component that wraps other pages to secure them. It checks the 'AuthContext' to see if a user is logged in. If not, it automatically redirects the user to the '/login' page, preventing access to authenticated routes."
"How does the application handle the case where a generated coop name like 'zany-waffle' already exists?","The 'createFlock' function in the backend first generates a code, then checks the database to see if it already exists. If it does, it enters a loop, appending an incrementing number (e.g., 'zany-waffle1') to the code until a unique one is found."
"What happens on the 'WinnerPage' if no winning restaurant can be determined?","If the backend's decision logic returns no winner, for instance if no votes were cast, the 'WinnerPage.js' component displays the message 'Your eggs have cracked...' and 'Decision not available' instead of a restaurant name."
"What is the role of the 'ci-testing.yml' GitHub Actions workflow?","The 'ci-testing.yml' workflow is the main Continuous Integration (CI) pipeline. It runs on every push and pull request to the main branch, installing all dependencies, running the linter to check code style, and executing the full Cypress end-to-end test suite to prevent regressions."
"How does the frontend use browser local storage?","The frontend uses 'localStorage' to persist a user's identity within a specific flock session. In 'NameFormPage.js', after a user enters their name, their 'chickName' and 'chickId' are saved to 'localStorage'. This allows them to be identified in subsequent API calls for that flock without having to re-enter their name."
"What are some of the custom colors defined in the Tailwind CSS configuration?","The 'tailwind.config.js' file extends the default theme with custom colors, including a 'primary' orange (#FC8800), 'accent_red' (#FD4C3C), 'accent_yellow' (#FCB000), and various text shades like 'gray_text' (#696767)."
"What is the purpose of the `/flocks/:coopName/step` API endpoint?","The POST endpoint at `/flocks/:coopName/step` allows the owner of a flock to advance the group to the next stage of the decision-making process. It increments the 'step' property in the database and emits a 'flock-updated' WebSocket event to notify all clients of the change in real-time."
"How is the Tenor API used in the application and how is the API key protected?","The Tenor API is used on the 'VotingPage' to fetch a relevant GIF for each restaurant nomination, making voting more engaging. The API call is proxied through the backend, which reads the `TENOR_API_KEY` from its environment variables. This protects the key by never exposing it in the client-side frontend code."
"Describe the deployment process for the backend application.","The backend is deployed using the `ci-cd_chickentinder-backend.yml` GitHub Actions workflow. On a push to the 'main' branch, a 'build' job runs tests and zips the backend code into an artifact. A subsequent 'deploy' job downloads the artifact, logs into Azure, and deploys the package to the 'chickentinder-backend' Azure Web App."
"What is the function of the `addChickToFlock` service in the backend?","The `addChickToFlock` function in 'flock-services.js' adds a new member (a 'chick') to a flock. It ensures that the chick's name is not already taken within that specific flock to prevent duplicates, then adds the new chick to the flock's 'chicks' array and saves the document."
"What specific routes are defined in the frontend's main 'App.js' file?","The main 'App.js' file uses React Router to define the application's URL structure. Key routes include '/' for the `TutorialPage`, '/welcome' for the `WelcomePage`, '/login' and '/register' for authentication, and dynamic routes like '/flock/:coopName' for the `MainFlockPage` and '/flock/:coopName/join' for the `NameFormPage`."
"What is the purpose of the `TextButtonInput.js` component?","'TextButtonInput.js' is a reusable frontend component that combines a text input field with a button on the right side. It is used throughout the app for actions like submitting a coop name, a chick name, or a restaurant nomination."
"How can a developer start a local development environment for this project?","According to the 'README.md', a developer can set up a local environment by cloning the repository, running `npm install` at the root, creating the necessary '.env' files for the backend and frontend, and then running `npm run backend-dev` and `npm run frontend-dev` in separate terminals."
"What is the purpose of the `revote` button on the winner page?","The 'Revote' button on the 'WinnerPage' allows the group to start a new voting round. When clicked, it calls the backend to delete the current basket of eggs, and then it calls the `nextStep` function to reset the flock's state back to step 2 (the nomination page), allowing users to submit new restaurant options."
