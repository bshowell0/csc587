question,answer
"What is the primary purpose of the disc-metrics repository?","The main goal of disc-metrics is to offer a low-cost, accessible computer vision tool to analyze disc golf throws from a video. It automatically calculates the disc's speed and angle, and provides a 3D visualization of the thrower's form."
"What problem does the disc-metrics tool aim to solve for disc golf players?","It provides an alternative to expensive equipment like radar guns or specialized hardware (like TechDisc) for measuring key performance metrics, making throw analysis more accessible to players."
"How does the program run, according to the README file?","The program is executed from the command line with the command python3 process.py path_to_video, where path_to_video is the location of the video file to be analyzed."
"What are the main stages of the analysis workflow in disc-metrics?","The workflow consists of five main stages: Perspective Calibration, Disc Flight Tracking, Metric Calculation, Pose Estimation, and 3D Wireframe Animation."
"How does the system calibrate itself to measure real-world distances?","It calibrates by detecting the disc in the first few frames of the video using a Hough Circle Transform. By comparing the disc's pixel radius to its known real-world radius (default 13.6525 cm), it establishes a pixels-to-meters conversion ratio."
"What is the technique used to track the disc while it's in flight?","The system uses background subtraction. It computes an average image to serve as a static background, then subtracts this from each frame to isolate the moving disc, which is then located using contour detection."
"Which metrics are calculated from the disc's flight path?","The program calculates the disc's release speed (in m/s and mph) and its launch angle relative to the horizontal."
"How does the software ensure that the calculated speed and angle are accurate?","It improves accuracy by filtering out outlier data points from the list of calculated speeds and angles before computing the final average, which makes the result more reliable."
"What technology is used for analyzing the thrower's form?","The tool uses the MediaPipe Pose Landmarker model (pose_landmarker_lite.task) to perform biomechanical analysis by detecting 33 distinct 3D landmarks on the thrower's body."
"What is the final output of the pose analysis portion of the tool?","The final output is a 3D wireframe animation of the throwing motion, generated using Matplotlib. This allows the user to view their throwing mechanics from any angle."
"What is the role of the process.py script?","process.py is the main orchestrator script. It handles command-line arguments and manages the data flow between the different modules, from loading the video to calling the calibration, tracking, and pose estimation components in sequence."
"What is the purpose of the src/perspective_calculator.py file?","This module is responsible for the initial camera calibration. It contains the logic to process video frames, detect the disc using cv2.HoughCircles, and calculate the pixels-to-meters ratio."
"Which module is responsible for finding the disc in flight and calculating its speed?","The src/disc_tracker.py module is responsible for the flight analysis. It finds the disc using background subtraction and calculates its speed and angle based on its position in consecutive frames."
"How does the src/disc_tracker.py isolate the disc from a static background?","It first computes a mean image from a sequence of frames to create a clean background. Then, for each frame, it calculates the absolute difference between that frame and the background, which leaves only the moving objects, primarily the disc."
"What is the function of the src/pose_tracker.py module?","This module serves as an interface to the MediaPipe pose estimation model. It preprocesses video frames and uses the model to detect and store the 3D coordinates of 33 body landmarks for the thrower."
"How is the 3D wireframe animation created?","The animation is created by the src/wireframe_animation.py module. It uses matplotlib.animation.FuncAnimation to repeatedly plot the 3D landmark data for each frame, creating an animated stick figure of the throwing motion."
"What is the pose_landmarker_lite.task file located in the models directory?","It is a pre-trained machine learning model from MediaPipe that is used for pose estimation. The pose_tracker.py script loads this model to detect human body landmarks in the video."
"What is the purpose of the remove_outliers function found in src/functions.py?","The remove_outliers function is a helper used to clean the data before final calculations. It removes statistical outliers from lists of numbers, which is applied to both the speed and angle measurements to improve the robustness of the final result."
"Based on the project structure, how are the different functionalities of the application separated?","The project is well-structured into a src directory containing separate Python classes for each major task: PerspectiveCalculator for calibration, DiscTracker for flight analysis, PoseTracker for biomechanics, and WireframeAnimator for visualization."
"Can the user disable the pose analysis feature when running the script?","Yes, the process.py script includes a --no-pose command-line argument that allows the user to run the analysis without performing the pose estimation."
"What are the main Python libraries that the disc-metrics project depends on?","The project relies heavily on OpenCV (cv2) for computer vision tasks, NumPy for numerical operations, MediaPipe for pose estimation, and Matplotlib for creating the 3D wireframe animations."
"How can a user adjust the program for a video that was not recorded at the default 60 frames per second?","A user can specify the video's actual frame rate using the --fps command-line argument. This is crucial for accurate speed calculations, as speed is derived from distance traveled per frame."
"What is the difference between process.py and processTester.py?","process.py is the main, fully-featured script for running the entire analysis pipeline. processTester.py appears to be a smaller, specialized script used during development for testing specific functionalities, particularly the pose tracking components."
"How does the application handle the thrower's form analysis? Which file is responsible for this?","The thrower's form is analyzed using a pose estimation model. The src/pose_tracker.py file is responsible for this; it uses the MediaPipe library to load a model and extract 33 3D body landmarks from the relevant video frames."
"What happens in the findDisc method within src/disc_tracker.py?","The findDisc method isolates the disc in flight. It subtracts the static background from a frame, applies a threshold to create a binary image of moving objects, and then uses cv2.findContours to identify the shape and bounding box of the disc."
"How does the script determine which frames to use for the detailed pose analysis?","After DiscTracker determines the frame index where the disc first appears in flight, the process.py script selects a slice of frames around that point (from 2 seconds before to 1 second after) and passes this segment to the PoseTracker."
"Can the program be run without the video display windows popping up during analysis?","Yes, by including the --no-video command-line flag when running process.py, the user can suppress the pop-up video windows and run the analysis in the background."
"How does the WireframeAnimator class create the illusion of a moving 3D figure?","It uses matplotlib.animation.FuncAnimation, which repeatedly calls an update function. In each call, the update function clears the plot and redraws the 3D wireframe using the landmark data from the next frame in the sequence."
"If I use a disc with a different size, how do I tell the program?","You can provide the correct disc size using the --disc_radius command-line argument, followed by the radius in centimeters. For example: python3 process.py my_video.mp4 --disc_radius 10.75."
"What is the mathematical formula used in perspective_calculator.py to find the pixel-to-meter ratio?","The calculate_ratio method uses the formula self.R / r, where R is the known physical radius of the disc in meters and r is the detected radius of the disc in pixels."
"What is the purpose of the findBackground method in the DiscTracker class?","The findBackground method creates a static background image by calculating the mean of all frames in the provided video segment. This background is later used to isolate moving objects like the disc."
"How are the body parts of the 3D wireframe connected in the visualization?","The connections are hardcoded in the createWireFrame (in pose_tracker.py) and update (in wireframe_animation.py) methods. They define lines to be drawn between specific landmark indices from the MediaPipe model, for example, connecting the left shoulder landmark to the left elbow landmark."
"What is the role of the data/examples.txt file?","The data/examples.txt file is a simple text file that mentions it contains examples of videos that can be used with the tracker, likely for testing or demonstration purposes."
"What specific OpenCV function is used to detect the disc for the initial calibration?","The perspective_calculator.py script uses the cv2.HoughCircles function to detect circular objects in the video frames, which is how it identifies the disc to calculate the perspective ratio."
"How does the script handle potential inaccuracies in the disc's detected position over time?","The findDiscSpeedAngle function in disc_tracker.py calculates speeds and angles from the position data. It then passes these values to the functions.remove_outliers utility to filter out statistical noise before calculating the final average, making the result more reliable."
"Why does the process.py script split the video frames into a leftHalf and rightHalf for processing?","It splits the frame spatially. The leftHalf is sent to the DiscTracker (assuming the disc flies into the left side of the frame), while the rightHalf is sent to the PoseTracker (assuming the thrower is on the right side). This focuses each module on the relevant area of the video."
